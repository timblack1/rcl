define([
        'config',
        'mustache', 
        'text!views/ImportDirectory/ConfirmCongID.html',
        "./CongDetailsView"
        ], 
        function(config, Mustache, template, CongDetailsView){
    
    return Backbone.View.extend({
        initialize:function(){
            _.bindAll(this, 'yes', 'no', 'record_id_format')
            this.href = $(event.target).attr('href')
        },
        render: function(){
            $('#steps').html(Mustache.render(template));
            this.delegateEvents()
            // Ask the user which part of the URL that was clicked is the
            //  congregation ID.
            
            var href = this.href
            // TODO: Handle the case where the href contains a javascript function call.  The
            //  PCA's directory works this way.
            // TODO: Handle the case where the href is empty and the click is handled
            //  by an onclick event.  This case is probably rare, so is a low priority.
            // Put href into div
            this.$('#href').html(href);
            // Try to guess the id with a regular expression, and display that id to 
            //  the user in a div.  Ask the user if it is the part of the URL that contains
            //  the congregation's id. Make it so the user only has to click a "Yes" button 
            //  to confirm if we got it right.
            this.regex = /([0-9])+/
            var href_underlined = href.replace(this.regex, '<u>$1</u>');
            this.$('#href_underlined').html(href_underlined)
        },
        events: {
            "click #yes": "yes",
            "click #no": "no"
        },
        yes:function(){
            var thiz = this
            // Converts:
            //  church.html?church_id=3
            // into:
            //  church.html?church_id={cong_id}
            var url = this.href.replace(this.regex, '{cong_id}')
            this.record_id_format(url)

            // Display the pages' content here.
           
            // Set up browser changes listener to watch for and handle Node changes
            //  listener's response
            var changes = db.changes();
            changes.onChange(function(change){
                var change_id = change.results[0].id
                var rev = change.results[0].changes[0].rev
                // Determine if the changed document is the dir we are editing
                if (typeof thiz.model != 'undefined' && change_id == thiz.model.get('_id')){
                    // Fetch document's new contents from db
                    thiz.model.fetch({success:function(model,response){
                        // Write HTML to page here
                        var html = config.rewrite_urls(thiz.model.get('cong_url_raw'), 
                                                      [thiz.model.get("cong_url_html")], 0)[0]
                        // Fix errors generated by OPC.org HTML
                        // TODO: Can this be done by some validation library; perhaps an online processor?
                        html = html.replace('class="silimage">', 'class="silimage" />')
                                   .replace('width="137">', 'width="137" />')
                        $('#cong_details_fields_selector').html(html)
                        changes.stop()
                    },
                        error:function(){console.error ("Could not fetch the directory")}
                    })
            }})
        },
        no:function(){
            // TODO: Otherwise, ask the user to highlight the congregation's id
            // TODO: Display the above request
            // TODO: Put the below in an event listener
            // TODO: Get the id the user highlighted, and replace it in the URL with {cong_id}
            var url = this.href
            this.record_id_format(url)
        },
        record_id_format:function(url){
            // TODO: Refactor this block into a reusable function
            // -----------------
            // If the URL is only partial, prepend the root of the URL
            var a = document.createElement('a')
            a.href = this.href
            var base = a.origin + a.pathname
            var root_url = base.slice(0,base.lastIndexOf('/'))
            // Cases:
            // Absolute, partial URL:  /locator.html
            if (url.indexOf('/') === 0){
                output_url = a.origin + url
            }
            // Absolute, full URL:  http://opc.org/locator.html
            else if (url.indexOf('http') === 0){
                output_url = url
            }
            // Relative, partial URL:  locator.html
            else{
                output_url = root_url + '/' + url
            }
            // -----------------
            
            // Get the URLs of all congregations in the directory
            
            var url_regex = output_url.replace('/','\/').replace('{cong_id}',this.regex)
            console.log(url_regex)
            var regex = new RegExp(url_regex,'g')
            var state_urls = []
            $.each(this.model.get('state_url_html'), function(index, state_html){
                // Get the urls which follow the same pattern as the original URL selected
                var results = regex.exec(state_html)
                console.log(results)
                state_urls.push(results)
            })
            // console.log(state_urls)

            // Record the pattern of the URL the user clicked, and the URLs of all congregations in the directory
            var thiz = this
            thiz.model.fetch({success:function(dir, response, options){
                // Request download of all congregation pages
                dir.save(
                    {
                        _id:thiz.model.get('_id'),
                        _rev:thiz.model.get('_rev'),
                        // Write first cong's URL to database, requesting Node to download its HTML
                        cong_url_raw:thiz.href,
                        cong_url:output_url,
                        get_cong_url_html:'requested',
                        cong_url_cong_id_regex:thiz.regex
                    },
                    {
                        success:function(){
                            // Show step 5, showing the table of congregation fields.
                            thiz.$el.fadeIn(1000)
                            thiz.cong_fields_view = new CongDetailsView({el: $("#steps")})
                            thiz.cong_fields_view.render();
                        },
                        error:function(model, xhr, options){
                            console.error('We got an error here')
                        }
                    }
                )
            }})
        }
    });

});
